{
  "csharp/csharp-12.html": {
    "href": "csharp/csharp-12.html",
    "title": "C# 12 😲 | Wahid Ustoz",
    "keywords": "C# 12 😲 Ushbu qismda qismda C# 12dagi eng 🆒 featurelarni ko'rib chiqamiz. ⭐ Primary Constructor class va struct tiplarini elon qilishda bira to'la endi asosiy konstruktor berib ketsa bo'ladi. Primary Constructor orqali yuborilgan obyektlar klass hududi bo'ylab ko'rinadi. Tip Primary constructor orqali yuborilgan obyektlar class memberi emas aksincha parametr ekanini yoddan chiqarmaslik kerak. Ularni this kalit so'zi orqali chaqirib bo'lmaydi. struct misolida. public readonly struct Nuqta(int x, int y) { public readonly int X => x; public readonly int Y => y; } ota classga ma'lumot uzatish. public class Ustoz(int id, string ism) : Ishchi(id) { public int Id => id; public string Ism => ism; } Va eng keraklisi dependency injection. public interface IService { Distance GetDistance(); } public class ExampleController(IService service) : ControllerBase { [HttpGet] public ActionResult<Distance> Get() { return service.GetDistance(); } } 💡 Collection Expressions Endi to'plamlarni e'lon qilishda new kalit so'zini ishlatishni hojati yo'q 😲. int[] sonlar = [1, 2, 3, 4, 5]; List<string> ismlar = [\"Ali\", \"Vali\", \"Hasan\"]; double[] qator1 = [1, 2, 3]; double[] qator2 = [4, 5, 6]; // ko'p o'lchamli array yasash double[][] jadval = [qator1, qator2, [7, 8, 9]]; 💣 Spead Operator Agar yuqoridagilari hali miyyangizni portlatmagan bo'lsa unda bunisiga qarang. Spread Operator .. yordami mavjud to'plamlarni yangi to'plamga osonlik bilan qo'shing! string[] qizlar = [\"Madina\", \"Hadicha\", \"Aisha\"]; string[] yigitlar = [\"Umar\", \"Ali\", \"Abubakr\"]; string[] hamma = [\"Wahid\", ..yigitlar, ..qizlar]; // hamma = [\"Wahid\", \"Umar\", \"Ali\", \"Abubakr\", \"Madina\", \"Hadicha\", \"Aisha\"] 🌠 Default Lambda parameters lambda expression elon qilishda endi uning parametrlariga default qiymatlarni berib ketsa bo'ladi. var yuza = (int a, int? b = null) => a * (b ?? a); Console.WriteLine(yuza(5)); // 25 Console.WriteLine(yuza(5, 6)); // 30 Bu yangi feature eng ko'p ishlatilishi kutilyapkan yana bir misol. app.MapGet(\"/users\", async (IUserService service, int? page = 1, int? pageSize = 50) => { }); Tip Yuqorida lambda expression yangi imkoniyatidan foydalanib Pagination uchun default qiymatlar berib ketilgan."
  },
  "csharp/index.html": {
    "href": "csharp/index.html",
    "title": "C# related posts | Wahid Ustoz",
    "keywords": "C# related posts Here you will find a comprehensive collection of resources and information meticulously curated for C# enthusiasts. Task vs ValueTask C# 12 😲"
  },
  "csharp/task-yoki-valuetask.html": {
    "href": "csharp/task-yoki-valuetask.html",
    "title": "Task yoki ValueTask? | Wahid Ustoz",
    "keywords": "Task yoki ValueTask? Task va uning jenerik sherigi Task<TResult> klasi ancha vaqtlardan beri bor va har bir .NETchi asinxron dasturlash uchun uni ishlatib ko’rgan. .NET Core 2.0dan boshlab yangi klas ValueTask va ValueTask<TResult> olib kirildi. Ho’sh siz ulardan qaysi birini ishlatishingiz kerak? Qisqa qilib aytganda, agarda siz kutubxona yozayotgan bo’lsangiz va shu kutubxona xotirani va resurslarni judayam kam sarflashi zarur bo’lgan joylarda ishlatilsa, siz ValueTask haqida bosh qotirsangiz arziydi. Lekin ValueTask ishlatishda judayam extiyotkor bo’lish kerak. Odatiy kunlik ishlarda esa Senior darajada bo’lmagan dasturchilar Task klasi ishlatgani ma’qul. Ushbu postni oxirigacha o’qib tushinib olganingizdan keyin darajangizdan qatiy nazar ValueTask va Taskni qayerda va qanday ishlatishni tushinib olasiz. Task/Task<TResult> Task klasining vaziflari ko’p. Qisqa qilib aytganda u uzoq vaqt davom etadigan ish qaytaradigan ma’lumotni o’rash uchun wrapper sifatida ishlatiladi va promise ya’ni va’da deyiladi. Qaytarilgan Task obyektini hohlagan vaqtda await qilib kutib turgan holda natijasini olsa bo’ladi. Bundan tashqari shu obyektni hohlagancha qayta-qayta yoki parallel bir nechta threadda await qilsa ham bir xil natija qaytaradi. Bu judaham kuchli yechim! async Task<int> GetNaturalGasPriceInUsdAsync() { await Task.Delay(1000); return 9; } var uzbekNaturalGasPrice = GetNaturalGasPriceInUsdAsync(); var price = await uzbekNaturalGasPrice; var price2 = await uzbekNaturalGasPrice; Yuqoridagi kodda ko’rinib turibdiki bitta Task obyektini bir necha marta await qilish mumkin va u bir xil natija qaytaradi. Muammo Unda muammo nimada? Gap shundaki, Task va Task<TResult> klas tiplar bo’lib har safar asinxron funksiya chaqirilganda Task yoki Task<TResult> allocate (xotirani o’zlashtirish) qilib qaytarishga to’g’ri keladi. Hullas, har safar funksiya chaqirilganda yangi instance yaratib qaytarish dastur tezligi va xotira samaradorligiga sezilarli ta’sir qiladi. Runtimedagi yechimlar Ko’p hollarda asinxron funksiyalar sodda bo’ladi va ularni bir marta await orqali chaqirish kifoya bo’ladi. ... await SendEmailAsync(email, cancellationToken); ... Bundan tashqari, ko’p hollarda asinxron funksiya ham ishini sinxron tugatadi ya’ni quyidagi misoldagidek ma’lum shartlar bajarilsagina asinxron ish bajariladi yo’qsa funksiya ishini sinxron tugatib Task qaytaradi. public async Task SendEmailAsync(Email email, CancellationToken cancellationToken = default) { if(email is not null) await client.SendEmailAsync(email, cancellationToken); logger.LogInformation(\"Email not sent!\"); } Ushbu koddan tushinish mumkinki ba’zi hollarda funksiya hech qanday asinxron ish bajarilmaydi. Bunday holatlar juda ham ko’p takrorlangani uchun .NET Runtime o’zi Taskning hech qanday asinxron ish bajarilmaganda qaytariladigan nusxasini Cache qilib oladi va qayta-qayta ishlataveradi. Bu o’sha biz bilgan Task.CompletedTask obyekti. Yuqoridagi kodda agar email null bo’lsa Runtime o’zi Task.CompletedTaskni cachedan olib qaytaradi. Agar asinxron ish bajarilsa, yangi Task obyekti allocate qilib qaytariladi. Yana bir misolga qarang. Bir Task<bool> qaytaradigan funksiya bor. Bu funksiyada 3 xil holat bor: darxol sinxron true qaytaradi darxol sinxron false qaytaradi asinxron ravishda uzoq vaqtda true yoki false qaytaradi. Dastlabki ikki holatda Task<bool>dan yangi obyekt allocate qilib qaytarish shart emas. 2 ta dona qiymat bo’lgani uchun Runtime ularni allaqachon Cache saqlab qo’ygan bo’ladi va o’shalarni qaytaradi. Ya’ni yangi xotira allocate qilinmaydi. Agar funksiya asinxron ish bajarsa, majburan Task<bool> obyekti allocate qilinadi. Quyidagi snippet shuni ko’rsatadi. public async Task<bool> ShouldSendEmailAsync(User user, CancellationToken cancellationToken = default) { if(user is null) return false; if(user.IsNew()) return true; return await IsNotAdminAsync() } Lekin hamma narsani ham Cache qilish practical yechim emas. Masalan, Task<int> qaytaradigan funksiyani hamma bo’lishi mumkin bo’lgan natijalarni Cacheda saqlash Gigabaytlab xotira talab qiladi. Ko’plab kutibxonalar shunday Cache texnikasidan foydalanib yangi obyektlar yaratilishini oldini olishadi. Masalan, MemoryStream.ReadAsync funksiyadi Task<int> obyekti orqali nechta bayt o’qilganini qaytaradi. Bu funksiya ko’pincha bir xil son qaytargani uchuni ichkarida birinchi qaytarilgan Task<int> obyekti Cache qilinadi. Keyingi safar chaqirilganda, agar yana o’shancha bayt o’qigan bo’lsa eski Cache qilingan obyekt qaytariladi. Yo’qsa Task.FromResult ishlatib yangi obyekt yaratiladi. Bu funksiya .NET yangi versiyalarida ValueTask<int> qaytaradigan qilib update qilingan. ValueTask<TResult> Yuqoridagi yechimni yanada takomillashtirish uchun .NET Core 2.0dan boshlab ValueTask<TResult> struct tanishtirildi. U asinxon funksiyalardan qaytariladi va TResult yoki Task<TResult> uchun wrapper vazifasini bajaradi. Agar asinxron funksiya muvaffaqiyatli sinxron yakunlansa, ValueTask<TResult> structi TResult ga initialize qilib qaytarialdi. Hech qanday allocation bo’lmaydi. Agar asinxron yakunlansa yoki qandaydir exception sodir bo’lsa, yangi Task<TResult> obyekti allocate qilib ValueTask<TResult>ga o’rab qaytariladi. Buning yordamida yuqorida keltirilgan MemoryStream.ReadBytes funksiyasi quyidagicha takomillashtirildi. Endi hech qanday Cache ishlatilmaydi. public override ValueTask<int> ReadAsync(byte[] buffer, int offset, int count) { try { int bytesRead = Read(buffer, offset, count); return new ValueTask<int>(bytesRead); } catch (Exception e) { return new ValueTask<int>(Task.FromException<int>(e)); } } Muhim narsa qolib ketyapti await dasturlash yo’lining eng muhim xususiyatlaridan biri bu asinxron operatsiya yakunlanganda chaqirish imkonini beruvchi callback method bilan ta’minlash. Ya’ni Task/Task<TResult> qaytaradigan asinxron funksiyalarga ish tugatilganda chaqiriladigan callback method bersangiz bo’ladi. async Task<ZipArchive> CreateZipArchiveFromCloudFiles() { var files await DownloadAllFilesToTempFolderAsync(); return await CreateZipAsync(files); } var zipArchive = await CreateZipArchiveFromCloudFiles() .ContinueWith(async (task) => { await CleanupTempFolderAsync(); }); Buni amalga oshirish uchun xotirada shu operatsiyani aks ettiruvchi obyekt saqlanishi kerak va u orqali callback method chaqirilishi kerak. Shu hususiyatni ta’minlash uchun .NET Core 2.1dan boshlab IValueTaskSource<TResult> interface tanishtirildi. Bu interface asinxron operatsiya holati haqida ma’lumot saqlaydi va OnCompleted methodi orqali unga yuqoridagidan callback method bersa bo’aldi. *IValueTaskSource<TResult> haqida keyingi postlarda.* Endi ValueTask<TResult> va ValueTask structlari birgalikda asinxron funsiyalarni har qanday holatda ham hech qanday hotira allocate qilmasdan natija qaytarish imkonini beradi. ValueTask ishlatishdagi havf ValueTask va ValueTask<TResult> qisqa qilib aytganda oddiy holatlarda bir marta await qilib ishlatiladigan Tasklar uchun chiqarilgan. Quyidagi holatlarda hech qachon ValueTask / ValueTask<TResult> ishlatmaslik kerak. ValueTask / ValueTask<TResult> ni bir martadan ortiq await qilish. ValueTask<TResult> ichidagi TResult obyekti GC tomonidan recycle qilib yuborilgan bo’lishi yoki boshqa operatsiya tomonidan ishlatilayotgan bo’lishi mumkin **ValueTask / ValueTask<TResult>**ni bir vaqta bir nechta threaddanawait qilish. Yuqoridagiday TResult obyekti bitta thread ishini tugatgach recycle qilib yuborilgan bo’lishi mumkin. Operatsiya yakunlanmasidan avval .GetAwaiter().GetResult() funksiyasi orqali blok qilib natijani kutish. IValueTaskSource va IValueTaskSource<TResult> interfacelari blok qilish imkoniyatini bermaydi. Agar sizga yuqoridagi imkoniyatlar chindan ham zarur bo’lsa, .AsTask() methodi orqali ValueTask/ValueTask<TResult> larni Taskga aylantirib olsangiz bo’ladi. Ushbu maqolada qandaydir xatolik topsangiz habar bering."
  },
  "dotnet/aspnetcore-8.html": {
    "href": "dotnet/aspnetcore-8.html",
    "title": "ASP.NET Core 8.0 | Wahid Ustoz",
    "keywords": "ASP.NET Core 8.0 ASP.NET Core nima ekanini yoddan chiqarganlar uchun eslatib o'taman, bu .NET Frameworkni asosan web texnologiyalari uchun javobgar qismi. ASP.NET Core 8 web va server texnologiyalari samaradorligini oshiradigan minglab performance improvement va yangi featurelar taqdim etdi. Blazor 🔥 .NET 8 versiyasidan boshlab Blazor endi to'laqonli Web UI frameworkga aylandi. U orqali sayt kontentlarini page yoki component levelida qayta render qilsa bo'ladi. Blazor avval 2 xil versiyaga ega edi. Server UI elementlari serverda render qilinib kerakli vaqtda SignalR orqali o'zgargan elementlargina klientga yuboriladi. bu birinchi parta saytni tortishda juda tez lekin juda katta server resurslari talab qiladi WASM UI elementlari to'liqligicha klient brauzerida render bo'ladi. birinchi marta saytni tortib olishga uzoq vaqt ketadi. serverdagi havfsizlik va boshqa server imkoniyatlari mavjud emas Blazor app yasashdan avval 2ta tanlovdan birini tanlashga to'g'ri kelar edi va butun sayt bo'ylab yoki Server yoki WASM rejimda ishlar edi. 📢 Endi Blazor render turini global sayt bo'yicha emas Page/Component levelida boshqarsa bo'ladi. Blazorni yangi Hybrid vesiyasida istalgan Component yoki Pageni server/wasm render bo'lishini boshqarsa bo'ladi. Bu orqali saytni birinchi marta tortib olish yorug'lik tezligida bo'ladi va unda keyin barcha renderin brauzerda WASM usulida amalga oshiriladi. Bundan tashqari Blazorda yana yuzlab yangiliklar bor. Ularni bu yerda o'qib oling. 🎥 Batafsil mana bu yerda 2X tezlikda ko'rib oling! Minimal API 😉 .NET 8dagi qo'shimchalarning ko'p qismi Native AOT va Source Generatorlar bilan bog'liq. Ular compile time vaqtida kerakli kodlarni generate qiladi va bu orqali runtime performance sezilarli oshiriladi. Form binding Avvalgi versiyalarida IFormFile va IFormCollection orqali form elementlariga erishish imkoni bor edi. Lekin MVC Controllerlar kabi [FromForm] attribute orqali form elementlarini Model objectga bog'lashni iloji yo'q edi. .NET 8 Minimal API endi bu ishni qila oladi. app.MapPost(\"/register\", async([FromForm] RegisterModel model) => { // register logic }); Mana bu postda bu haqida batafsil! Native AOT Support Native AOT orqali publish qilingan dasturlarni hajmi juda kichi bo'ladi, ular juda tez ishga tushadi va juda ham kam RAM talab qiladi. Bu yerda batafsil o'qing!"
  },
  "dotnet/dotnet-8.html": {
    "href": "dotnet/dotnet-8.html",
    "title": ".NET 8 🎉 | Wahid Ustoz",
    "keywords": ".NET 8 🎉 Qaynoqqina yangilik, .NET Foundation yaqindagina .NET SDK 8ni ommaga taqdim etdi. Ushbu post orqali undagi eng qiziqarli o'zgarishlar va yangiliklar bilan tanishamiz. .NET 8 SDK yuklash Avvalo .NET 8ni o'rnatishdan boshlaymiz. Quyidagi powershell komandasini tering. winget install Microsoft.DotNet.SDK.8 Tip Menga o'xshab Nerd bo'lmaganlar 👉 shu link orqali o'zlariga kerakli installerni tortib olishlari mumkin. Tip C# 12 bilan bog'liq yangiliklarni bu yerda o'qing! Tip ASP.NET Core 8.0 bilan bog'liq yangiliklarni bu yerda o'qing! ⚠️ Har bir yangi qo'shilgan Feature ustida batafsil postlarni shu yerda berib boraman. Yangiliklardan qolib ketmaslik uchun Telegram kanalimga obuna bo'ling!"
  },
  "dotnet/index.html": {
    "href": "dotnet/index.html",
    "title": ".NET and ASP.NET related posts | Wahid Ustoz",
    "keywords": ".NET and ASP.NET related posts Here you will discover an extensive array of the most recent news, cutting-edge features, and essential updates for .NET. 📰 ✨ Logging Levels (and how to use them) Logging Code Generators .NET 8 ASP.NET Core 8.0"
  },
  "dotnet/log-code-gen.html": {
    "href": "dotnet/log-code-gen.html",
    "title": "Improve logging performance with code generation | Wahid Ustoz",
    "keywords": "Improve logging performance with code generation Avvalgi postda logging levels __(logging darajalari)__ni tushintirib bergan edim. Bugun logging tezligini oshirish uchun taklif etilayotgan yangi feature Logging Code Generation haqida gaplashamiz. Code generation bu yangilik emas. Avvaldan Blazor, Razor va shunga o'xshash engine'lar compile vaqtida kod generate qiladi. .NET 6 versiyasida olib kirilgan yangi attribute LoggingMessageAttribute bo'lsa aynan Logging samaradorligini oshirish uchun compile vaqtida reusable logging funksiyalari yaratish uchun ishlatiladi. Ushbu qo'shimcha haqida batafsil bu yerda o'qishingiz mumkin. Logging Code generation ishlatish uchun static partial klas yaratib uni ichida partial kalit so'zi orqali methodlar elon qilishingiz kerak. Bu methodlarni tanasi compile vaqtida .NET tomonidan yaratiladi va qayta ishlatiladi. public static partial class ValidationFilterLoggings { [LoggerMessage( EventId = 0, Level = LogLevel.Trace, Message = \"Fluent validation started for type {targetType}.\")] public static partial void LogValidationStarted( this ILogger logger, string targetType); } E'lon qilingan funksiyani tanasi compile vaqtida .NET tomonidan yaratiladi. Keyin ushbu logging methodni quyidagicha ishlatsa bo'ladi. public class AsyncFluentValidationFilter<T> : IEndpointFilter where T : class { private readonly ILogger<AsyncFluentValidationFilter<T>> logger; public AsyncFluentValidationFilter(ILogger<AsyncFluentValidationFilter<T>> logger) => this.logger = logger; public async ValueTask<object> InvokeAsync(EndpointFilterInvocationContext context, EndpointFilterDelegate next) { ... logger.LogValidationStarted(nameof(T)); ... } } Note Yuqorida elon qilingan LogValidationStarted funksiyasi ILogger interface ustiga qurilgani uchun, bu methodni istalgan ILogger interface obyektida ishlatsa bo'ladi. Agar sizga maxsus bitta generic ILogger<T> ustida ishlaydigan mehod kerak bo'lsa, this ILogger<T> shaklida elon qilishingiz kerak. Misol uchun quyidagi kodga qarang 👀 public static partial class ValidationFilterLoggings { [LoggerMessage( EventId = 1, Level = LogLevel.Trace, Message = \"Fluent validation for {targetType} is successful.\")] public static partial void LogValidationCompleted( this ILogger<AsyncFluentValidationFilter<T>> logger, string targetType); }"
  },
  "dotnet/log-levels.html": {
    "href": "dotnet/log-levels.html",
    "title": "Logging Levels | Wahid Ustoz",
    "keywords": "Logging Levels Logging dasturni eng muhim qismlaridan biri hisoblanadi. Ko’pchilik unga katta e’tibor bermasa ham Logging to’g’ri qilinmasa juda katta mablag’ va vaqt yo’qotilishiga olib kelishi mumkin. Odam yozgan lyuboy sistemada Bug 🪲 bo’ladi. Dastur ishga tushgandan keyin kelib chiqqan xatoliklarni dasturda yozib borilayotgan Loglarsiz qidirib topishni imkoni yo’q. Bugungi postda Log Levels ya’ni log xabarlarni muhimlik darajalariga qarab qanday ishlatishni o’rganamiz. 1. Trace — logger.LogTrace() Bu turdagi loglar dastur davomidagi har bir qadamni batafsil yozib ketish uchun ishlatiladi. Yangi jarayon, funksiya, loop yoki oqim boshlanishi va tugaganidan keyin iz qoldirish uchun Trace log yozib ketiladi. public async Task ProcessOrder(CustomerOrder order) { logger.LogTrace(\"Starting order processing for OrderId: {OrderId}\", order.OrderId); // Validate the order if (IsOrderValid(order)) { logger.LogTrace(\"Order validation successful for OrderId: {OrderId}\", order.OrderId); // Perform necessary actions such as updating inventory, sending notifications, etc. logger.LogTrace(\"Persisting order with OrderId: {OrderId}\", order.OrderId); await storage.PersistOrderAsync(order); logger.LogTrace(\"Publishing OrderCreated message with OrderId: {OrderId}\", order.OrderId); await messaging.PublishOrderCreated(order); } } 2. Debug — logger.LogDebug() Bu turdagi log Tracega juda ham yaqin, lekin yagona farqi Debug log ichida o’zgaruvchilar qiymatlari batafsilroq yoritiladi. Shu sababli bu turdagi log ichida maxfiy ma’lumotlar bo’lishi mumkin. Debug va Trace log miqdori juda katta bo’lgani uchun odatda Production muhitda o’chirib qo’yish tavsiya qilinadi. Shaxsiy fikrimcha Debug yoki Trace darajasidan kamida bittasi Production muhitda ham ko’rinishi kerak. public async Task ProcessOrder(CustomerOrder order) { logger.LogTrace(\"Starting order processing for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Processing order: {Order}\", order); // Validate the order if (IsOrderValid(order)) { logger.LogTrace(\"Order validation successful for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Order validation successful for: {Order}\", order); // Perform necessary actions such as updating inventory, sending notifications, etc. logger.LogTrace(\"Persisting order with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Persisting order: {order}\", order); await storage.PersistOrderAsync(order); logger.LogTrace(\"Publishing OrderCreated message with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Publishing OrderCreated for order: {order}\", order); await messaging.PublishOrderCreated(order); } } Summary Yuqorida keltirilgan LogTrace va LogDebug odatda dasturchilar uchun yo’naltirilgan bo’ladi. Ya’ni bu turdagi loglarni odatda developerlar BUG🪲ni qidirib topish uchun ishlatishadi. 3. Information — logger.LogInformation() Bu turdagi log odatda biror katta jarayon boshlanishi va muvaffaqiyatli tugaganini ko’rsatish uchun ketiladi. Trace va Debugdan farqli o’laroq, Information turidagi xabarlar miqdori juda kam bo’ladi. Bunday log ichida iloji boricha maxfiy ma’lumotlar ko’rsatilmasligi kerak. public async Task ProcessOrder(CustomerOrder order) { logger.LogTrace(\"Starting order processing for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Processing order: {Order}\", order); // Validate the order if (IsOrderValid(order)) { logger.LogTrace(\"Order validation successful for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Order validation successful for: {Order}\", order); // Perform necessary actions such as updating inventory, sending notifications, etc. logger.LogTrace(\"Persisting order with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Persisting order: {order}\", order); await storage.PersistOrderAsync(order); logger.LogTrace(\"Publishing OrderCreated message with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Publishing OrderCreated for order: {order}\", order); await messaging.PublishOrderCreated(order); logger.LogInformation(\"Order with orderId {OrderId} successfully processed.\", order.Id); } } 4. Warning — logger.LogWarning() Warning xabarlar dasturda kutilmagan holat yoki noto’g’ri ma’lumot paydo bo’lganda qoldiriladi. Bunday holat yuz berganda dasturchi, sistema admini yoki dasturni o’zi ham hech qanday amal bajarish orqali xatoni tuzatishga urinishi shart emas. Bu xabarni muhim tarafi, sistemadagi bu kutilmagan holat keyinchalik e’tibor talab etuvchi jiddiy xatolikka olib borishi mumkin. public async Task ProcessOrder(CustomerOrder order) { logger.LogTrace(\"Starting order processing for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Processing order: {Order}\", order); // Validate the order if (IsOrderValid(order)) { logger.LogTrace(\"Order validation successful for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Order validation successful for: {Order}\", order); // Perform necessary actions such as updating inventory, sending notifications, etc. logger.LogTrace(\"Persisting order with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Persisting order: {order}\", order); await storage.PersistOrderAsync(order); logger.LogTrace(\"Publishing OrderCreated message with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Publishing OrderCreated for order: {order}\", order); await messaging.PublishOrderCreated(order); logger.LogInformation(\"Order with orderId {OrderId} successfully processed.\", order.Id); } else { logger.LogDebug(\"Validation failed for order {order}\", order); // batafsil ma'lumot qoldirish uchun logger.LogWarning(\"Validation failed for order with id: {OrderId}\", order.Id); logger.LogDebug(\"Publishing OrderFailed for order: {order}\", order); await messaging.PublishOrderFailed(order); } } 5. Error — logger.LogError() Error xabarlar biror katta yumush bajarish jarayonida xatolik yuz berib shu funksiya oxiriga yeta olmasa qoldiriladi. Error xabar qoldirilish shu jarayon oxiriga yetmay qolganini lekin sistemaning boshqa qismlariga ta’sir qilmasligini anglatadi. Odatda Error xabarlarni sistemani o’zinig Error Handling, Retry mexanizmlari bartafar qiladi. Ayrim hollarda operatorlar ma’lumot xolatini o’zgartirish orqali ham bu Error holatdan chiqib ketishlari mumkin. Error xabar yuz berganda Operatorlar yoki dasturchilar uyqularidan turib bo’lsa ham shu xatolikni bartaraf etishlari kerak. Shuning uchun bu turdagi xatoliklarni log qilishda shoshilmaslik kerak. Operator va dasturchini uyqusini buzishga arziydimi degan savolni berish kerak. public async Task ProcessOrder(CustomerOrder order) { logger.LogTrace(\"Starting order processing for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Processing order: {Order}\", order); // Validate the order if (IsOrderValid(order)) { logger.LogTrace(\"Order validation successful for OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Order validation successful for: {Order}\", order); try { // Perform necessary actions such as updating inventory, sending notifications, etc. logger.LogTrace(\"Persisting order with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Persisting order: {order}\", order); await storage.PersistOrderAsync(order); logger.LogTrace(\"Publishing OrderCreated message with OrderId: {OrderId}\", order.OrderId); logger.LogDebug(\"Publishing OrderCreated for order: {order}\", order); await messaging.PublishOrderCreated(order); } catch(DbException ex) { logger.LogError(\"Order processing failed for order with id: {OrderId}\", order.Id); throw new OrderProcessingFailedException(order, ex); } logger.LogInformation(\"Order with orderId {OrderId} successfully processed.\", order.Id); } else { logger.LogDebug(\"Validation failed for order {order}\", order); // batafsil ma'lumot qoldirish uchun logger.LogWarning(\"Validation failed for order with id: {OrderId}\", order.Id); logger.LogDebug(\"Publishing OrderFailed for order: {order}\", order); await messaging.PublishOrderFailed(order); } } 6. Critical — logger.LogCritical() Bunday Log sistemani barcha qismlarini ishdan chiqaruvchi xatolikni yozish uchun ishlatiladi. Masalan, RAM yoki SSD xotira tugab qolishi, butun dastur bo’ylab Database’ga bog’lana olmaslik yoki shunga o’xshash dastur ishlashi uchun so’zsiz kerak resursni yo’qligi. Bunday xatoliklar dastur davomida bir marta yuz beradi. Ya’ni Critical error yuz bergandan keyin dastur o’chib qolishi va Sistem adminstrator tomonidan qayta yoqilishi zarur. Critical error xabar yuz berganda Sistem Adminstrator uyqusidan turib bo’lsa ham xatolikni bartaraf etishi kerak. builder.Services.AddDbContext<AppDbContext>((provider, options) => { var logger = provider.Services.GetRequiredService<ILogger<Program>>(); var connectionString = builder.Configuration.GetConnectionString(\"Postgres\"); if(string.IsNullOrWhiteSpwace(connectionString)) { logger.LogCritical(\"Postgres connection string not configured.\"); Environment.Exit(-1); } options.UseNqgsql(connectionString); }); Yuqoridagi misollardan ko’rinib turibdi agar dastur davomida yetarlicha log xabarlar qoldirmoqchi bo’lsangiz kodda judaham noise (shovqin — chalg’ituvchi qismlar) juda ko’payib ketadi. Buni oldini olish uchun Logging Abstraction qo’llash kerak. Bu haqida batafsil keyingi postda."
  },
  "index.html": {
    "href": "index.html",
    "title": "🚀 Wahid Ustoz tech space! 💻 | Wahid Ustoz",
    "keywords": "🚀 Wahid Ustoz tech space! 💻 .NET Discover valuable tips and in-depth tutorials related to .NET and ASP.NET Core. C# Language Explore the latest language features explained in a clear and accessible manner. Happy coding! 🎉 ⌨️"
  },
  "patterns/index.html": {
    "href": "patterns/index.html",
    "title": "Design Patterns 🧩 | Wahid Ustoz",
    "keywords": "Design Patterns 🧩 Dastur hajmi oshib borgani sari uni qo'llab-quvvatlash, eski kodga ta'sir qilmasdan yangi funksiyalar qo'shish va eski funksiyalarni yangi modullarda muammosiz ishlatish murakkablashib boradi. Hech qanday dizayn patternlarga rioya qilinmasa yuqoridagi imkoniyatlar bilan hayrlashishga to'g'ri keladi. Code Basega kichik o'zgarishlar qo'shish ham sistemani juda ko'p qismiga o'zgarish kiritgani uchun barcha o'zgarishlarni tekshirish va testlash imkonsiz bo'lib boradi. Dizayn patternlar qo'llab-quvvatlashga, o'zgartirishga va kengaytirishga oson bo'lgan kod yozish imkonini beruvchi qo'liplardir. Dastur ehtiyojida kelib chiqib bir yoki bir-nechta dizayn patternlarni qo'llab uzoq yillar kengayib boradigan code base quriladi. Dizayn patternlarni quyadigi asosiy maqsadlari mavjud Kodni tartiblash - klass/komponentlarni strukturasi va bir-biri bilan munosabatini tartibga soluvchi qoidalar toplamiga ega Qayta ishlatish - dizayn patternlar qayta ishlatsa bo'ladigan moslashuvchan kod yozishni ta'minlaydi modulyar dizayn - module/komponentlarni mustaqil va boshqa komponentlarga bog'liq bo'lmasligini ta'minlaydi muammolarni yakkalash - faqatgina bitta muammoga e'tibor qaratadigan klasslar yaratishni ta'minlaydi umumiy yechimni abstraktsiyalash - muammolardagi umumiy yechimni/kodni abstraktsiyalash va qayta ishlatishni ta'minlaydi Kengaytirish - dasturni talablari o'sib borgan sari kelajakda kutiladigan o'zgarishlarga moslashuvchan kod yozish imkonini beradi Kommunikatsiya - barcha uchun tanish va uzor yillardan beri standardga aylangan dizayn patternlarni ishlatish orqali code baseni butunlay o'qib chiqmasdan ham tushinsa bo'ladigan, tashqaridan kelgan odamga gapirib yuboradigan kod yozish imkonini beradi stateDiagram-v2 designPatterns: Design Patterns creational: Creational structural: Structural behavioral: Behavioral designPatterns --> creational designPatterns --> structural designPatterns --> behavioral creational: Abstract Factory creational: Builder creational: Factory Method creational: Prototype creational: Singleton structural: Adapter structural: Bridge structural: Composite structural: Decorator structural: Flyweight structural: Proxy behavioral: Chain of Responsibility behavioral: Command behavioral: Interpreter behavioral: Iterator behavioral: Mediator behavioral: Memento behavioral: Observer behavioral: State behavioral: Strategy behavioral: Template Method behavioral: Visitor Dizayn patternlar asosiy 3 kategoriyaga bo'linadi: Creational - obyektlarni yaratish va initsializatsiya qilish jarayonini markazlashtirish, kodni keraksiz qismlariga bog'lanib qolishi(coupling)ni oldini olish uchun ishlatiladi Structural - asosiy vazifasi obyektlarni bir-biri bilan munosabatini qurish va tartiblash. Behavioral - ma'lum funksional maqsadga erishish uchun obyektlar bir-biri bilan qanday aloqa qilshi ko'rsatadi Tip Keyingi postlar dizayn patternlarni har biriga to'xtalib hayotiy misollar bilan tushintirib beraman 🫡"
  },
  "tooling/index.html": {
    "href": "tooling/index.html",
    "title": "Tooling ⚙️ | Wahid Ustoz",
    "keywords": "Tooling ⚙️ Here you will find a collection of useful tools and resources for your development workflow. 🛠️ ⚙️ VS Code o'rnatish ✨ VS Code sozlash 🪛"
  },
  "tooling/vscode-install.html": {
    "href": "tooling/vscode-install.html",
    "title": "| Wahid Ustoz",
    "keywords": ""
  },
  "tooling/vscode-setup.html": {
    "href": "tooling/vscode-setup.html",
    "title": "VS Code setup | Wahid Ustoz",
    "keywords": "VS Code setup VS Code dasturini bilmaydigan dasturchi bo’lmasa kerak. U bugunning eng zamonaviy universal va yengil ishlovchi kod tahrirchisi. U orqali hohlagan SDK va framework’da loyihalar amalga oshirsa bo’ladi. Uning kichik hajmli ekani o’rnatish va ishni boshlash uchun juda qulay. Bundan tashqari har bir yo’nalish va tech-stack uchun alohida extension (kengaytma)lar mavjud bo’lib, ular orqali VS Code dasturini tark etmasdan istalgan ishni amalga oshirsa bo’ladi. Shulardan eng muhimlari va aynan .NET dasturchilar uchun zarur bo’lganlari haqida bugun gaplashamiz. Vaqtingiz yo’q bo’lsa manabu yerga keling va profilni bittada yuklab oling! 👉 Profilni yuklash Ko’rinish Chiroyli, estetik va sodda ko’rinishga ega setup qilishga harakat qilaman. Buning uchun quyidagi extension va o’zgarishlar kerak bo’ladi. Material Icon Theme: PKief.material-icon-theme VS Code har xil fayl turiga qarab turlicha cute ikonkalar ko’rsatadi. Shades of Purple: ahmadawais.shades-of-purple Juda ham sodda va ranglari ajralib turuvchi mavzu. Unda dominant rang to’q ko’k rang. Koddagi sintaks ham yaqqol ajralib ko’zga tashlanib turadi. Font hajmini boshqarish Bundan tashqari editor font (tahrirolvchi fonti)ni osonlik bilan kattalashtirish yoki kichiklashtirish uchun maxsus Shortcut (qisqa kod) yaratilgan. Editor Font’ni kattalashtirish uchun CTRL+SHIFT+= kichiklashtirish uchun esa CTRL+SHIFT+- bossangiz kifoya. Mening ishlash ekranim hajmi katta bo’lgani uchun ekrandan uzoqroqqa o’tib olgan holda fontni kattaroq qilib ishlashni yoqtiraman. Note Shu o’rinda aytib o’tish kerak CTRL+= va CTRL+- tugmalarini SHIFTsiz bosadigan bo’lsangiz butun VS Code oynasi fonti haji o’zgaradi. .NET Essentials Endi asosiy mavzuga o’tamiz. .NET dasturchilari uchun o’rnatib olishi kerak bo’lgan extension va sozlamalar bilan tanishamiz. C# Dev Kit: ms-dotnettools.csdevkit Microsoft tomonidan yaqindagina taqdim etilgan ushbu extension C# uchun eng kerakli uskunalarni va qulayliklarni o’z ichiga oladi. Bulardan intellisense, test explorer va .NET fayllarini sichqoncha orqali qo’shish imkoniyati. Note Ushbu extension bilan birgalikda C# Extension va IntelliCode for C# Dev Kit (AI’ga asoslangan kodni taxmin qilish qurilmasi) qo’shimcha ravishda automatik o’rnatiladi. C# Snippets: jorgeserrano.vscode-csharp-snippets Bu extension orqali C# tilidagi kodlarini yozib o’tirmasdan ularni qisqarmasi orqali automatik kod generate qilsa bo’ladi. Masalan, class so’zini yozgandan keyin TAB tugmasini bossangiz sizga automatik siz turgan fayl nomi bilan bir xil nomga ega klass yaratib beradi. Injiner uchun kerakli Quyidagi extensionlar barcha injinerlar uchun juda foydali va ish tezligini oshirishga yordam beradi. Docker: ms-azuretools.vscode-docker Docker extension orqali sistemadagi docker container va image’larni VS Code’ni tark etmasdan boshqarsa bo’ladi. GitLens — Git supercharged: eamodio.gitlens git ishlatadigan har qanday injiner Git Lens extension o’rnatib olishi shart. Git bilan bog’liq ma’lumotlar shu bitta extension orqali ko’rinadi. Database clients MongoDB for VS Code: mongodb.mongodb-vscode Ushbu extension vscode’ni o’zidan turib MongoDB’ga ulanish va uni boshqarish imkonini beradi. PostgreSQL: ms-ossdata.vscode-postgresql PostgresSQL server uchun eng qulay va yengil ishlovchi klient. SQL Server (mssql): ms-mssql.mssql MSSQL foydalanuvchilari uchun esa quyidagi extension eng foydali bo’ladi. Redis: cweijan.vscode-redis-client Local redis klient, redis instance’lar va cache boshqaruvi uchun ajoyib extension. Profilni yuklash Note Yuqoridagi hammasini hech qanday muammosiz bitta tugma bosish orqali o’rnatib olish uchun quyidagi men ishlatadigan Profil’ni VS Code dasturiga yuklang! Quyidagi linkni oching: .NET (wahidustoz) Rasmda ko’rsatilgan tugmani bosib yangi profil yarating va zavqlaning"
  }
}